#!/usr/bin/env bash
# This script monitors CPU, memory and AMD GPU usage in CSV format
# It could collect data for a period of time, and generate average/median using ministat
set -eu

GTT=true
ministat=false
time=30
raw=""

die() { echo -n "EXIT: " >&2; echo "$@" >&2; exit 1; }

usage() {
	echo "$0 [-m] [-g] [-h]"
	echo "-m : ministat mode, display avg values after 30 seconds of run"
	echo "-g : disable GPU GTT stats"
	echo "-h : display this message"
	exit 0
}

while getopts "ghm" arg; do
	case "${arg}" in
		g)
			GTT=false
			;;
		h)
			usage
			;;
		m)
			ministat=true
			raw=$(mktemp -p /tmp sysload.XXX)
			;;
		*)
			die "Bad argument, cf help (-h)"
	esac
done

if $ministat; then
	if ! which ministat >/dev/null; then
		die "ministat needs... ministat installed"
	fi
fi

headers="CPU usage (%)"

if [ -r /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq ]; then
	scalingFreqMax=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq)
	scalingFreqMin=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq)
	cores=$(cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_cur_freq | wc -l)
	let scalingFreqTotalMax=scalingFreqMax*cores
	let scalingFreqTotalMin=scalingFreqMin*cores
	scalingHeaders="CPU avg scaling freq (MHz), CPU max freq reached (%)"
else
	scalingHeaders=""
fi

headers="${headers}, ${scalingHeaders}, mem Tot (MiB), mem Free (MiB), mem Used (MiB), mem Used (%)"

if which radeontop >/dev/null; then
	radeontop=", GPU usage (%), GPU Temp (°C), Package Power Tracking (Watt), GPU VRAM (mb), GPU VRAM usage (mb), GPU VRAM usage (%)"
	if $GTT; then
		radeontop="$radeontop, GPU GTT (mb), GPU GTT usage (mb), GPU GTT usage (%)"
	fi
else
	radeontop=""
fi

if [ -n "$radeontop" ]; then
	gpuVRAMTot=$(sudo dmesg | awk '/VRAM memory ready/ {print substr($5, 1, length($5)-1)}')
	[ -z "${gpuVRAMTot}" ] && gpuVRAMTot=0
	if $GTT; then
		gpuGTTTot=$(sudo dmesg | awk '/GTT memory ready/ {print substr($5, 1, length($5)-1)}')
		[ -z "${gpuGTTTot}" ] && gpuGTTTot=0
	fi
fi


echo "${headers}${radeontop}"

if $ministat; then
	echo "${headers}${radeontop}" > $raw
fi

while true; do
	OLDIFS=$IFS
	IFS=$'\n'
	mapfile top < <(top -bn1)
	# 2nd line: CPU usage
	# 3rd line: mem usage
	# Bug warning because parsing of id is not easy
	# %Cpu(s): 0.0 us, 0.0 sy, 0.0 ni,100.0 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st
	# %Cpu(s):  0.0 us,  0.4 sy,  0.0 ni, 99.6 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
	IFS=$OLDIFS
	cpuIdle=$(echo ${top[2]} | cut -d ',' -f 4 | awk '{print $1}')
	# Using only awk and not depending on bc for floating point
	cpuUsage=$(awk "BEGIN { printf(\"%.1f\n\", 100 - $cpuIdle)}")
	memTot=$(echo ${top[3]} | awk '/MiB Mem/ {print $4}')
	memFree=$(echo ${top[3]} | awk '/MiB Mem/ {print $6}')
	memUsed=$(echo ${top[3]} | awk '/MiB Mem/ {print $8}')
	memUsedPercent=$(awk "BEGIN { printf(\"%.2f\n\", $memUsed / $memFree)}")
	if [ -n "${scalingHeaders}" ]; then
		# Create average of all core scaling_cur_freq
		mapfile freqs < <(cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_cur_freq)
		scalingFreqSum=0
		for freq in ${freqs[@]}; do
			let scalingFreqSum=scalingFreqSum+freq
		done
		scalingFreqAvg=$(awk "BEGIN { printf(\"%.1f\n\", $scalingFreqSum / $cores)}")
		scalingFreqPercent=$(awk "BEGIN { printf(\"%.1f\n\", $scalingFreqSum / $scalingFreqTotalMax * 100)}")
		output="$cpuUsage, $scalingFreqAvg, $scalingFreqPercent, $memTot, $memFree, $memUsed, $memUsedPercent"
	else
		output="$cpuUsage, $memTot, $memFree, $memUsed, $memUsedPercent"
	fi
	if [ -n "$radeontop" ]; then
		# XXX need to detect card id if multiples card used
		# unit: 36000 for 36°C
		if [ -r /sys/class/drm/card0/device/hwmon/hwmon2/temp1_input ]; then
			let gpuTemp=$(cat /sys/class/drm/card0/device/hwmon/hwmon2/temp1_input)/1000
		else
			gpuTemp=0
		fi
		# MicroWatt
		if [ -r /sys/class/drm/card0/device/hwmon/hwmon2/power1_average ]; then
			gpuUwatt=$(cat /sys/class/drm/card0/device/hwmon/hwmon2/power1_average)
			gpuWatt=$(awk "BEGIN { printf(\"%.1f\n\", $gpuUwatt / 1000000)}")
		else
			gpuWatt=0
		fi
		read -a radeon < <(radeontop -d - -l 1 -t 30| tail -n 1)
		# 1682538215.325064: bus 74, gpu 0.00%, ee 0.00%, vgt 0.00%, ta 0.00%, sx 0.00%, sh 0.00%, spi 0.00%, sc 0.00%, pa 0.00%, db 0.00%, cb 0.00%, vram 3.19% 260.28mb, gtt 0.15% 17.50mb, mclk 55.76% 1.338ghz, sclk 18.86% 0.415ghz
		gpuUsage=$(echo ${radeon[4]} | cut -d '%' -f 1)
		[ -z "${gpuUsage}" ] && echo "[BUG] gpuUsage empty"
		gpuVRAMUsedPercent=$(echo ${radeon[26]} | cut -d '%' -f 1)
		[ -z "${gpuVRAMUsedPercent}" ] && echo "[BUG] gpuVRAMUsedPercent empty"
		gpuVRAMUsed=$(echo ${radeon[27]} | cut -d 'm' -f 1)
		[ -z "${gpuVRAMUsed}" ] && echo "[BUG] gpuVRAMUsed empty"
		output="$output, $gpuUsage, $gpuTemp, $gpuWatt, $gpuVRAMTot, $gpuVRAMUsed, $gpuVRAMUsedPercent"
		if $GTT; then
			gpuGTTUsedPercent=$(echo ${radeon[29]} | cut -d '%' -f 1)
			[ -z "${gpuGTTUsedPercent}" ] && echo "[BUG] gpuGTTUsedPercent empty"
			gpuGTTUsed=$(echo ${radeon[30]} | cut -d 'm' -f 1)
			[ -z "${gpuGTTUsed}" ] && echo "[BUG] gpuGTTUsed empty"
			output="$output, $gpuGTTTot, $gpuGTTUsed, $gpuGTTUsedPercent"
		fi
	fi
	echo $output
	if $ministat; then
		if [ $time -ne 0 ]; then
			echo $output >> $raw
			time=$(( time - 1))
		else
			break
		fi
	fi
	sleep 1
done

if $ministat; then
	# Generate a new output with only the avg value
	# merge all lines in one ministat file .ministat.avg and ministat.median
	tail -n +2 $raw > $raw.noheaders
	IFS=","
	c=1
	head -1 $raw > $raw.avg
	for i in $(head -1 $raw); do
		# ministat output
		#    N           Min           Max        Median           Avg        Stddev
		#   x  30             0           0.8           0.4           0.4    0.25730701
		avg=$(ministat -C $c -d ',' -n $raw.noheaders | tail -n 1 | awk '{print $6;}')
		if [ $c -eq 1 ]; then
			echo -n "${avg}" >> $raw.avg
		else
			echo -n ",${avg}" >> $raw.avg
		fi
		c=$(( c + 1))
	done
	echo >> $raw.avg
	IFS=$OLDIFS
	echo "=================== 30 seconds average ===================="
	cat $raw.avg
	for i in $raw $raw.avg $raw.noheaders; do
		rm $i
	done
fi
