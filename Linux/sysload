#!/usr/bin/env bash
# This script monitors CPU, memory and AMD GPU usage in CSV format
# It could collect data for a period of time, and generate average/median using ministat
set -eu

ministat=false
time=30
raw=""
headers=""
scaling=""
host=""			# Shelly plug S could be used for external power measurement
timestamp=false

die() { echo -n "EXIT: " >&2; echo "$@" >&2; exit 1; }

usage() {
	echo "$0 [-m] [-g] [-h] [-s hostname]"
	echo "-h : display this message"
	echo "-m : ministat mode, display avg values after 30 seconds of run"
	echo "-s hostname: Get powe usage from a Shelly plug S"
	echo "-t : Add timestamp (Epoc)"
	exit 0
}

while getopts "hms:t" arg; do
	case "${arg}" in
		h)
			usage
			;;
		m)
			ministat=true
			raw=$(mktemp -p /tmp sysload.XXX)
			;;
		s)	host=$OPTARG
			;;
		t)	timestamp=true
			;;
		:)
			die "Option -$OPTARG requires an argument." >&2
			;;
		*)
			die "Bad argument, cf help (-h)"
	esac
done

if $ministat; then
	if ! which ministat >/dev/null; then
		die "ministat needs... ministat installed"
	fi
fi

if $timestamp; then
	headers="Epoc, CPU usage (%), "
else
	headers="CPU usage (%), "
fi

if [ -r /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq ]; then
	scalingFreqMax=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq)
	scalingFreqMin=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq)
	cores=$(cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_cur_freq | wc -l)
	let scalingFreqTotalMax=scalingFreqMax*cores
	#let scalingFreqTotalMin=scalingFreqMin*cores
	scalingHeaders="CPU avg scaling freq (MHz), CPU max freq reached (%), "
else
	scalingHeaders=""
fi

headers="${headers}${scalingHeaders}mem Tot (MiB), mem Free (MiB), mem Used (MiB), mem Used (%), "
hwmon=""
if [ -d /sys/class/drm/card0/device/hwmon/hwmon2 ]; then
	hwmon=hwmon2
elif [ -d /sys/class/drm/card0/device/hwmon/hwmon4 ]; then
	hwmon=hwmon4
fi
if [ "$(cat /sys/class/drm/card0/device/hwmon/${hwmon}/name)" = "amdgpu" ]; then
	if [ -r /sys/class/drm/card0/device/hwmon/${hwmon}/power1_average ]; then
		APU_PPT_support=true
		label=$(cat /sys/class/drm/card0/device/hwmon/${hwmon}/power1_label)
		if [ ${label} != "PPT" ]; then
			echo "Non expected drivers: power1 label is ${label}"
		fi
		amdgpu="Package Power Tracking (Watt), "
	else
		APU_PPT_support=false
		amdpgu=""
	fi

	if [ -r /sys/class/drm/card0/device/hwmon/${hwmon}/subsystem/hwmon2/temp1_input ]; then
		K10_support=true
		label=$(cat /sys/class/drm/card0/device/hwmon/${hwmon}/subsystem/hwmon2/name)
		if [ ${label} != "k10temp" ]; then
			echo "Non expected temperature probe name: ${label}"
		fi
		amdgpu="${amdgpu}CPU Temp (°C), "
	else
		K10_support=false
	fi

	if [ -r /sys/class/drm/card0/device/gpu_busy_percent ]; then
		GPU_BUSY_support=true
		amdgpu="${amdgpu}GPU usage (%), "
	else
		GPU_BUSY_support=false
	fi

	if [ -r /sys/class/drm/card0/device/mem_info_vram_total ]; then
		APU_VRAM_support=true
		gpuVRAMTot=$(cat /sys/class/drm/card0/device/mem_info_vram_total)
		gpuVRAMTot=$(( gpuVRAMTot / 1024 / 1024 ))
		amdgpu="${amdgpu}GPU VRAM (mb), GPU VRAM usage (mb), GPU VRAM usage (%), "
	else
		APU_VRAM_support=false
	fi

	if [ -r /sys/class/drm/card0/device/mem_info_gtt_total ]; then
		APU_GTT_support=true
		gpuGTTTot=$(cat /sys/class/drm/card0/device/mem_info_gtt_total)
		gpuGTTTot=$(( gpuGTTTot / 1024 / 1024 ))
		amdgpu="${amdgpu}GPU GTT (mb), GPU GTT usage (mb), GPU GTT usage (%), "
	else
		APU_GTT_support=false
	fi

else
	amdgpu=""
fi

# Check if it a shelly plug
if [ -n "$host" ]; then
	# Need to have curl|wget|fetch
	if which wget >/dev/null; then
		fetch_cmd="wget -q --output-document - "
	elif which curl >/dev/null; then
		fetch_cmd="curl -s "
	elif which fetch >/dev/null; then
		fetch_cmd="fetch -qo - "
	else
		die "Didn’t found wget, curl neither fetch"
	fi
	ping -c 3 -q $host >/dev/null || die "Could not ping shelly plug"
	url="http://${host}/meter/0/"
	if ! ${fetch_cmd} ${url} > /tmp/curl.txt; then
		die "There is something wrong while trying to reach ${url}"
	fi
	if cut -d ',' -f 1 /tmp/curl.txt | grep -q power; then
		shelly="wattmeter (W)"
	else
		die "Didn't find 'power' keyword in http reply"
	fi
else
	shelly=""
fi

echo "${headers}${amdgpu}${shelly}"

if $ministat; then
	echo "${headers}${amdgpu}${shelly}" > $raw
fi

while true; do
	OLDIFS=$IFS
	IFS=$'\n'
	mapfile top < <(top -bn1)
	if $timestamp; then
		time=$(date +%s)
		output="${time}, "
	else
		output=""
	fi
	# 2nd line: CPU usage
	# 3rd line: mem usage
	# Bug warning because parsing of id is not easy
	# %Cpu(s): 0.0 us, 0.0 sy, 0.0 ni,100.0 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st
	# %Cpu(s):  0.0 us,  0.4 sy,  0.0 ni, 99.6 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
	IFS=$OLDIFS
	cpuIdle=$(echo ${top[2]} | cut -d ',' -f 4 | awk '{print $1}')
	# Using only awk and not depending on bc for floating point
	cpuUsage=$(awk "BEGIN { printf(\"%.1f\n\", 100 - $cpuIdle)}")
	output="${output}${cpuUsage}, "
	memTot=$(echo ${top[3]} | awk '/MiB Mem/ {print $4}')
	memFree=$(echo ${top[3]} | awk '/MiB Mem/ {print $6}')
	memUsed=$(echo ${top[3]} | awk '/MiB Mem/ {print $8}')
	memUsedPercent=$(awk "BEGIN { printf(\"%.2f\n\", $memUsed / $memFree)}")
	if [ -n "${scalingHeaders}" ]; then
		# Create average of all core scaling_cur_freq
		mapfile freqs < <(cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_cur_freq)
		scalingFreqSum=0
		for freq in ${freqs[@]}; do
			let scalingFreqSum=scalingFreqSum+freq
		done
		scalingFreqAvg=$(awk "BEGIN { printf(\"%.1f\n\", $scalingFreqSum / $cores)}")
		scalingFreqPercent=$(awk "BEGIN { printf(\"%.1f\n\", $scalingFreqSum / $scalingFreqTotalMax * 100)}")
		scaling="$scalingFreqAvg, $scalingFreqPercent, "
	fi
	output="${output}${scaling}$memTot, $memFree, $memUsed, $memUsedPercent, "

	# XXX need to detect card id if multiples card used
	# Need to detecd if hwmon2 or hwmon4
	# MicroWatt
	if ${APU_PPT_support}; then
		gpuUwatt=$(cat /sys/class/drm/card0/device/hwmon/${hwmon}/power1_average)
		gpuWatt=$(awk "BEGIN { printf(\"%.1f\n\", $gpuUwatt / 1000000)}")
		output="${output}${gpuWatt}, "
	fi

	# unit: 36000 for 36°C
	if ${K10_support}; then
		let CPUTemp=$(cat /sys/class/drm/card0/device/hwmon/${hwmon}/subsystem/hwmon2/temp1_input)/1000
		output="${output}${CPUTemp}, "
	fi

	if ${GPU_BUSY_support}; then
		gpuUsage=$(cat /sys/class/drm/card0/device/gpu_busy_percent)
		output="${output}${gpuUsage}, "
	fi
	if ${APU_VRAM_support}; then
		gpuVRAMUsed=$(cat /sys/class/drm/card0/device/mem_info_vram_used)
		gpuVRAMUsed=$(( gpuVRAMUsed / 1024 / 1024 ))
		gpuVRAMUsedPercent=$(awk "BEGIN { printf(\"%.1f\n\", $gpuVRAMUsed / $gpuVRAMTot)}")
		output="${output}${gpuVRAMTot}, ${gpuVRAMUsed}, ${gpuVRAMUsedPercent}, "
	fi
	if ${APU_GTT_support}; then
		gpuGTTUsed=$(cat /sys/class/drm/card0/device/mem_info_gtt_used)
		gpuGTTUsed=$(( gpuGTTUsed / 1024 / 1024 ))
		gpuGTTUsedPercent=$(awk "BEGIN { printf(\"%.1f\n\", $gpuGTTUsed / $gpuGTTTot)}")
		output="${output}${gpuGTTTot}, ${gpuGTTUsed}, ${gpuGTTUsedPercent}, "
	fi

	if [ -n "$shelly" ]; then
		watt=$(${fetch_cmd} ${url} | cut -d ',' -f 1 | cut -d ':' -f 2)
		output="${output}$watt"
	fi

	echo $output
	if $ministat; then
		if [ $time -ne 0 ]; then
			echo $output >> $raw
			time=$(( time - 1))
		else
			break
		fi
	fi
	sleep 1
done

if $ministat; then
	# Generate a new output with only the avg value
	# merge all lines in one ministat file .ministat.avg and ministat.median
	tail -n +2 $raw > $raw.noheaders
	IFS=","
	c=1
	head -1 $raw > $raw.avg
	for i in $(head -1 $raw); do
		# ministat output
		#    N           Min           Max        Median           Avg        Stddev
		#   x  30             0           0.8           0.4           0.4    0.25730701
		avg=$(ministat -C $c -d ',' -n $raw.noheaders | tail -n 1 | awk '{print $6;}')
		if [ $c -eq 1 ]; then
			echo -n "${avg}" >> $raw.avg
		else
			echo -n ",${avg}" >> $raw.avg
		fi
		c=$(( c + 1))
	done
	echo >> $raw.avg
	IFS=$OLDIFS
	echo "=================== 30 seconds average ===================="
	cat $raw.avg
	for i in $raw $raw.avg $raw.noheaders; do
		rm $i
	done
fi
