#!/bin/sh
# Generate dot graph from the FreeBSD audio system (hdaa mainly)
# This tool is an helper to found output pcm to use or troubleshoot problem
# Work in progress
# Usage:
# hdaa2dot | dot -Tpng -o sound.png
set -e
#sysctl -q hw.snd.verbose=0 || true
OLDIFS=$IFS
IFS=$'\n'
default=false
as_groups=""
printf "digraph G {\n"
for line in $(grep pcm /dev/sndstat); do
	pcmid=$(echo ${line} | cut -d ':' -f 1)
	pcmid=${pcmid#pcm}
	desc=$(echo ${line} | cut -d ':' -f 2)
	parent=$(sysctl -n dev.pcm.$pcmid.%parent)
	parentid=$(echo $parent | tr -dc '0-9')
	parentfam=$(echo $parent | tr -dc 'a-z')
	printf '  "pcm%s %s" -> %s;\n' $pcmid $desc $parent
	if [ "$parentfam" == 'hdaa' ]; then
		for line in $(sysctl dev.hdaa.$parentid. | grep _original); do
		# Need to create a group per as, and put them on a subgraph
		#dev.hdaa.0.nid35_original: 0x90a60170 as=7 seq=0 device=Mic conn=Fixed ctype=Digital loc=Internal color=Unknown misc=1
		#dev.hdaa.0.nid34_original: 0x40f001f0 as=15 seq=0 device=Other conn=None ctype=Unknown loc=0x00 color=Unknown misc=1
		#dev.hdaa.0.nid32_original: 0x40f001f0 as=15 seq=0 device=Other conn=None ctype=Unknown loc=0x00 color=Unknown misc=1
			nidid=$(echo $line | cut -d '.' -f 4 | cut -d ':' -f 1 | tr -dc '0-9')
			as=$(echo $line | cut -d ':' -f 2 | cut -d '=' -f 2 | cut -d ' ' -f 1)
			device=$(echo $line | cut -d ':' -f 2 | cut -d '=' -f 4 | cut -d ' ' -f 1)
			conn=$(echo $line | cut -d ':' -f 2 | cut -d '=' -f 5 | cut -d ' ' -f 1)
			#printf '  %s -- "nid%s (%s/%s)";\n' $parent $nidid $device $conn
			printf '  %s -> nid%s;\n' $parent $nidid
			if ! echo "${as_groups}" | grep -wq ${as}; then
				# Avoid duplicate members
				as_groups="${as_groups} ${as}"
				#printf 'DEBUG as_groups contains: %s\n' ${as_groups}
			fi
			eval "
				[ -z \${as_group_$as+x} ] && as_group_${as}=\"\"
				#printf 'adding nid %s into group as_group_%s\n' \${nidid} $as
				if ! echo \"\${as_groups_$as}\" | grep -wq \${nidid}; then
					# Avoid duplicate members
					# BUG: Didn't work!
					as_group_${as}=\"\${as_group_$as} \${nidid}\"
				fi
				#printf 'group as_group_%s contains now: %s\n' $as \${as_group_$as}
			"
		done
	fi
done
#printf 'Dummy DEBUG, as_group_7 contains (multiple):%s\n' "${as_group_1}"
IFS=" "
for as in ${as_groups}; do
	#printf 'DEBUG as group (one number!):%s\n' "${as}"
	printf 'subgraph cluster_%s {\n' $as
	printf 'label = "as %s";\n'  $as
	eval "
		#printf 'DEBUG as_group_%s contains: %s\n' \${as} \"\${as_group_$as}\"
		for nid in \${as_group_${as}}; do
			printf 'nid%s;\n' \${nid}
		done
	"
	printf '}\n'
done
IFS=$OLDIFS
printf "}\n"
